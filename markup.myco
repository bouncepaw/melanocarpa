**Markup language** is a formal language for marking up a document using text.

A popular to differentiate markups is //lightweight// vs //not lightweights//. A classic example of the former is [[Markdown]], which people talk too much about nowadays.

=> Mycomarkup
Mycomarkup is my take on how lightweight markups should be designed. I consider it to be better than all other solutions so far.

=> https://git.sr.ht/~tim-ats-d/Postem-markup

Soupalt:
> I've found a nice little tool that is perfect for post-processing HTML "dumps" (like for example exported from wikis / note taking tools or static site generators):
> => https://soupault.app/
> => https://github.com/PataphysicalSociety/soupault 
> (I've included the GitHub link because it's quite hard to find it on the main site)
>
> It can be used to insert snippets, mangle paths, create indices, etc.
>
> BTW, I remember having a discussion with Lion and Timur about how HTML can be used for augmentation (in a post-processing step) instead of augmenting each and every markup language with various constructs.

=> https://thomasorus.com/kaku.html
Another [[Markdown]] derivative 

=> https://www.joelonsoftware.com/2022/01/27/making-the-web-better-with-blocks/ | Making the web better. With blocks!
> As a result of the non-standardization of blocks, our end-users suffer. If someone is using my blog engine, they can only use those blocks that I had time to implement. Those blocks may be pretty basic or incomplete. Users might want to use a fancier block that they saw in WordPress or Medium or Notion, but my editor doesn’t have it. Blocks can’t be shared or moved around very easily, and our users are limited to the features and capabilities that we had time to re-implement.
>
> To fix this, we’re going to create a protocol called the Block Protocol.